buildscript {
    repositories { jcenter() }

    dependencies {
        classpath 'ru.alfalab.gradle:cucumber-reporting-gradle-plugin:0.1.0'
        classpath 'ru.alfalab.gradle:cucumber-parallel-test-gradle-plugin:0.3.1'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.9"
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.netflix.nebula:nebula-release-plugin:4.1.0'
        classpath 'com.netflix.nebula:gradle-info-plugin:3.2.1'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.3.0'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:4.9.1'

    }
}

repositories {
    maven {
        url "https://dl.bintray.com/alfa-laboratory/maven-releases/"
    }
    jcenter()
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'ru.alfalab.cucumber-reporting'
apply plugin: 'ru.alfalab.cucumber-parallel-test'
apply plugin: 'license'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'base'
apply plugin: 'maven-publish'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'distribution'
// ==== nebula ======
apply plugin: 'nebula.release'
apply plugin: 'nebula.maven-publish'
apply plugin: 'nebula.source-jar'
apply plugin: 'nebula.javadoc-jar'

description = """MP_Akita"""
generateRunner.glue = ["ru.alfabank.steps", "steps"]

if (project.hasProperty('projVersion')) {
    project.version = project.projVersion
} else {
    project.version = '1.0.0'
}

dependencies {
    compile 'ru.alfabank.tests:akita:4.0.0'
    testCompile "org.mockito:mockito-core:2.13.0"
    testCompile "org.mockito:mockito-inline:2.13.0"
    testCompile "com.github.tomakehurst:wiremock-standalone:2.15.0"
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

test {
    maxParallelForks = 10
    ignoreFailures = true
    jvmArgs += "-Dprofile=${profile}"
    jvmArgs += "-Dselenide.pageLoadStrategy=none"

    //путь к классу с кастомными настройками драйвера.
    jvmArgs += "-Dselenide.browser=ru.alfabank.tests.core.drivers.CustomDriverProvider"

    //параметры galen framework для возможности скролла страницы и снятния полного скриншота страницы
    jvmArgs += "-Dgalen.browser.screenshots.fullPage=true"
    jvmArgs += "-Dgalen.browser.screenshots.fullPage.scrollWait=50"


    if (tag) {
        jvmArgs += "-Dcucumber.options=--tags ${tag}" //параметр для запуска тестов с использование тэгов
    }
    if (browser) {
        jvmArgs += "-Dbrowser=${browser}"
    }
    if (remoteUrl) {
        jvmArgs += "-DremoteUrl=${remoteUrl}" //url для удаленного зауска тестов
    }
    if (browserVersion) {
        jvmArgs += "-DbrowserVersion=${browserVersion}"
    }
    if (height) {
        jvmArgs += "-Dheight=${height}" //высота окна браузера
    }
    if (width) {
        jvmArgs += "-Dwidth=${width}" //ширина окна браузера
    }
    if (maximized) {
        jvmArgs += "-Dselenide.startMaximized=${maximized}"
    }
    if (width && height) {
        jvmArgs += "-Dselenide.browserSize=${width}x${height}"
    }

    reports {
        html.enabled = false
        junitXml.enabled = false
    }
}

task makeZip(type: Zip) {
    from('build/reports/cucumber') {
        into("${project.version}-testReport")
    }
}

license {
    header rootProject.file('HEADER')
    strictCheck true
}
